<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>UTF-8编码的解析</title>
    <url>/2023/02/27/UTF-8%E7%BC%96%E7%A0%81%E7%9A%84%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>使用C语言处理<code>UTF-8</code>编码文本时，单纯用<code>getc</code>和<code>putc</code>函数处理单字符已经无法满足需求，<br>所以需要了解怎么处理<code>UTF-8</code>编码的文本。</p>
<span id="more"></span>
<h2 id="编码特点"><a href="#编码特点" class="headerlink" title="编码特点"></a>编码特点</h2><p><code>UTF-8</code>编码的特点是</p>
<ol>
<li>兼容其他编码，比如ASCII编码</li>
<li>为了节省空间，它是变字长的，即每个符号所占的字节长度是不确定的，为1~3个字节长度。</li>
</ol>
<h2 id="长度的确定"><a href="#长度的确定" class="headerlink" title="长度的确定"></a>长度的确定</h2><p>因此需要了解<code>UTF-8</code>编码的字节长度是如何确定的（从内存的角度）：</p>
<ul>
<li>如果一个字节第一位是 0 ，则这个字节就是一个单独的字符</li>
<li>如果第一位是 1 ，则连续有多少个 1 ，就表示当前字符占用多少个字节<br>例如“春”的<code>UTF-8</code>编码是<code>0xe6 0x98 0xa5</code>，<code>e</code>则代表了“春”字占用了三个字节长度。</li>
</ul>
<h2 id="C语言判断示例"><a href="#C语言判断示例" class="headerlink" title="C语言判断示例"></a>C语言判断示例</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> len = <span class="number">0</span>; <span class="comment">// UTF-8字符占用多少个字节</span></span><br><span class="line"><span class="type">int</span> c = getc(fp); <span class="comment">// 从哪里来无所谓了</span></span><br><span class="line"><span class="keyword">if</span> (c == EOF) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">if</span> ((c &amp; <span class="number">0x80</span>) == <span class="number">0x80</span>) &#123;</span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c &amp; <span class="number">0x1</span> &lt;&lt; (<span class="number">7</span>-i))) &#123;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;              </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    len = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外windows终端（cmd）的默认字符集是936不支持<code>UTF-8</code>字符，所以需要改下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chcp 查看当前字符集</span><br><span class="line">chcp 65001 切换到支持`UTF-8`的字符集</span><br></pre></td></tr></table></figure>
<h2 id="C语言按UTF-8编码读取文本文件"><a href="#C语言按UTF-8编码读取文本文件" class="headerlink" title="C语言按UTF-8编码读取文本文件"></a>C语言按UTF-8编码读取文本文件</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFF_LEN 100 <span class="comment">// 小于100个字节长度</span></span></span><br><span class="line"><span class="type">char</span> buff[BUFF_LEN];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">clear_buff</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BUFF_LEN; i++) &#123;</span><br><span class="line">        buff[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> c = EOF;</span><br><span class="line">    <span class="type">int</span> c_cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cindex = <span class="number">0</span>;</span><br><span class="line">    FILE * fp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> len_of_utf8 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> text_len = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> endflag = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (argc == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((fp = fopen(argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;open %s failed\n&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((c = getc(fp)) != EOF) &#123;</span><br><span class="line">        <span class="keyword">if</span> (endflag == <span class="number">1</span>) &#123;</span><br><span class="line">            text_len++;</span><br><span class="line">            c_cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> ((c &amp; <span class="number">0x80</span>) == <span class="number">0x80</span>) &#123;</span><br><span class="line">                i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> ((c &amp; <span class="number">0x1</span> &lt;&lt; (<span class="number">7</span>-i))) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                len_of_utf8 = i;</span><br><span class="line">                endflag = <span class="number">0</span>;                </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                len_of_utf8 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (len_of_utf8 &gt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;UTF8 decode error len &gt; 4\n&quot;</span>);</span><br><span class="line">            fclose(fp);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        c_cnt++;</span><br><span class="line">        <span class="keyword">if</span> (c_cnt == len_of_utf8) &#123;</span><br><span class="line">            endflag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[%d]%c _ %x text_len %d\n&quot;</span>, cindex, c, c, text_len);</span><br><span class="line">        <span class="keyword">if</span> (cindex &lt; (BUFF_LEN<span class="number">-1</span>))</span><br><span class="line">            buff[cindex++] = c; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (endflag) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buff);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;UTF8 text len is %d\n&quot;</span>, text_len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buff);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>毛笔笔画粗细变化</title>
    <url>/2023/02/27/%E6%AF%9B%E7%AC%94%E7%AC%94%E7%94%BB%E7%B2%97%E7%BB%86%E5%8F%98%E5%8C%96/</url>
    <content><![CDATA[<p>笔画粗细变化有两种方式:</p>
<ol>
<li>按开</li>
<li>解开（侧锋入笔）<span id="more"></span></li>
</ol>
<p>按开就是提按不同导致笔画粗细不同，按的力气大些笔画就粗些。</p>
<p>而解开就是先轻轻下笔，下笔方向与笔画方向成90°左右（随意，看实际情况），然后稍稍放轻力气，让笔和纸保持接触同时笔尖又没有压力。接着向笔画的方向行笔，感受笔毫在这个方向变化过程中的弹力即可。这个解开的过程就可以从侧边入手随意调整笔画粗细，还保留一种弹力的味道。<br>来源于B站视频：<a href="https://www.bilibili.com/video/BV1wd4y1J7d4/?share_source=copy_web&vd_source=f42c80b48d6f78c5608245eba6dfb797">【书法研究】自学书法最大的笔法误区</a></p>
]]></content>
      <tags>
        <tag>书法</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/02/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p>$$<br>a \to b<br>$$</p>
]]></content>
  </entry>
</search>
